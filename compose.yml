# This is going to be comment-heavy, since it's supposed to be
# somewhat educational to read this.
#
# ðŸ’¬ðŸ’¬ðŸ’¬
# The original compose file (https://github.com/sprintcube/docker-compose-lamp/blob/master/docker-compose.yml)
# used a lot of environment variables (which go in an .env file in the
# same directory as the compose.yml file), which makes sense...except
# there were a lot of variables in the original env (https://github.com/sprintcube/docker-compose-lamp/blob/master/sample.env)
# that aren't used in this 3512 box, or which I felt obscured what
# was actually going on, or made it harder to read this compose file.
services:
  ## ðŸ’¬ðŸ’¬ðŸ’¬
  # This is actually more than just a web server - it's Apache
  # *and* PHP *and* mod_php tying the two together. Best practices
  # these days would indicate these should be teased out into two
  # services (a web server, PHP with php-fpm), but here we are.
  webserver:
    build:
      ## ðŸ’¬ðŸ’¬ðŸ’¬
      # I've done this context/dockerfile thing so that the COPY
      # commands that are used there can easily refer to the
      # www and config directories located in the root of this project.
      context: .
      dockerfile: dockerfiles/php.8.4.dockerfile

    container_name: 3512-box-webserver

    restart: always

    env_file:
      - path: ./.env
      - path: ./globals.env

    ports:
      - 80:80
      - 443:443

    ## ðŸ’¬ðŸ’¬ðŸ’¬
    # The original compose file had a lot more in here, but I decided
    # to either remove things (like ssl stuff) or shift to using watch
    # (see the next section) and just leave the logs here.
    volumes:
      - ./logs/apache2:/var/log/apache2
      - ./logs/xdebug:/var/log/xdebug

    # ðŸ’¬ðŸ’¬ðŸ’¬
    # This seems to be a fairly newish development in Docker Compose world.
    # https://www.docker.com/blog/announcing-docker-compose-watch-ga-release/
    #
    # Instead of using volumes or bind mounts, you can use watch. So if
    # something changes in a given host path (like www, the Apache default.conf,
    # or PHP's php.ini), we can cause a sychronization (and restart, if
    # a server needs to be restarted, for example) to happen.
    develop:
      watch:
        # ðŸ’¬ðŸ’¬ðŸ’¬
        # - All student work winds up in here: static assets (images, js, and css)
        #   and our router (rooted at index.php) goes in here; everything else
        #   (views, controllers, etc) will go in the public subdirectory.
        # - Since the action is sync, after a save is done on any file in here,
        #   refreshing the page will show the result of the new files. If
        #   you have a tool to force a browser refresh to happen when that
        #   occurs, so much the better.
        - action: sync
          path: ./www
          target: /var/www/html
        # ðŸ’¬ðŸ’¬ðŸ’¬
        # The default.conf file controls what Apache does with everything in
        # html/public, so if you need to change something, we want Apache
        # to restart (hence the sync+restart).
        - action: sync+restart
          path: ./config/vhosts/default.conf
          target: /etc/apache2/sites-enabled/default.conf
        # ðŸ’¬ðŸ’¬ðŸ’¬
        # Kind of the same deal as with default.conf, but now with PHP
        # settings. To be honest, the only thing useful in here for our
        # purposes are the Xdebug settings!
        - action: sync+restart
          path: ./config/php/php.ini
          target: /usr/local/etc/php/php.ini

    # ðŸ’¬
    # Look in the .env file for this. (It's currently /var/www/html/public.
    environment:
      APACHE_DOCUMENT_ROOT: ${APACHE_DOCUMENT_ROOT}

    depends_on:
      # ðŸ’¬
      # Don't spin up the webserver unless the DB is "healthy" - that is, its healthcheck
      # runs successfully.
      database:
        condition: service_healthy

  ## ðŸ’¬ðŸ’¬ðŸ’¬
  # Our database resource is pretty stratightforward: a standard mariadb db.
  # See https://hub.docker.com/_/mariadb
  database:
    image: mariadb:10.6
    container_name: 3512-box-database
    restart: always

    # ðŸ’¬
    # Some interestitng things going on here:
    # - If you put a db dump sql file in the ./config/initdb folder, that db
    #   will be created when you create the container!
    # - You can "copy" the contents of a db by copying the contents of ./database into
    #   another project. Useful for submissions, I reckon. (For example, if a student
    #   has added tables to a starting database, by providing the contents of the database
    #   folder to me, I can spin up an assignment with that database without the need for
    #   students doing an export and me doing an import.)
    volumes:
      - ./config/initdb:/docker-entrypoint-initdb.d
      - ./database:/var/lib/mysql
      - ./logs/mariadb:/var/log/mysql

    # ðŸ’¬
    # Look in the .env file for the password.
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}

    # ðŸ’¬
    # This is used in the depends_on sections of the webserver and adminer services
    # to determine whether the database is good to go. There actually is a fancy script
    # that you can run to do the
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MARIADB_ROOT_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ðŸ’¬
  # - This is a very lightweight (and sufficiently useful) replacement for phpMyAdmin).
  # - See https://hub.docker.com/_/adminer
  # - If you want to access Adminer, pop on over to http://localhost:8888
  adminer:
    image: adminer:standalone
    container_name: 3512-box-adminer
    restart: always
    ports:
      - 8888:8080
    environment:
      ADMINER_DEFAULT_SERVER: database
    depends_on:
      database:
        condition: service_healthy
